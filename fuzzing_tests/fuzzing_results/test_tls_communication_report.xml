<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="5" time="39.040" timestamp="2025-06-16T16:07:56.009116" hostname="jochanghyeon-ui-MacBookAir.local"><testcase classname="test_tls_communication.TestTLSFuzzing" name="test_valid_connection" time="1.023" /><testcase classname="test_tls_communication.TestTLSFuzzing" name="test_invalid_password" time="1.017" /><testcase classname="test_tls_communication.TestTLSFuzzing" name="test_malformed_binary_data" time="1.007"><failure message="hypothesis.errors.FailedHealthCheck: Function-scoped fixture 'tls_server' used by 'test_tls_communication.py::TestTLSFuzzing::test_malformed_binary_data'&#10;&#10;Function-scoped fixtures are not reset between examples generated by&#10;`@given(...)`, which is often surprising and can cause subtle test bugs.&#10;&#10;If you were expecting the fixture to run separately for each generated example,&#10;then unfortunately you will need to find a different way to achieve your goal&#10;(e.g. using a similar context manager instead of a fixture).&#10;&#10;If you are confident that your test will work correctly even though the&#10;fixture is not reset between generated examples, you can suppress this health&#10;check to assure Hypothesis that you understand what you are doing.&#10;&#10;See https://hypothesis.readthedocs.io/en/latest/healthchecks.html for more information about this. If you want to disable just this health check, add HealthCheck.function_scoped_fixture to the suppress_health_check settings for this test.">E   hypothesis.errors.FailedHealthCheck: Function-scoped fixture 'tls_server' used by 'test_tls_communication.py::TestTLSFuzzing::test_malformed_binary_data'
    
    Function-scoped fixtures are not reset between examples generated by
    `@given(...)`, which is often surprising and can cause subtle test bugs.
    
    If you were expecting the fixture to run separately for each generated example,
    then unfortunately you will need to find a different way to achieve your goal
    (e.g. using a similar context manager instead of a fixture).
    
    If you are confident that your test will work correctly even though the
    fixture is not reset between generated examples, you can suppress this health
    check to assure Hypothesis that you understand what you are doing.
    
    See https://hypothesis.readthedocs.io/en/latest/healthchecks.html for more information about this. If you want to disable just this health check, add HealthCheck.function_scoped_fixture to the suppress_health_check settings for this test.
All traceback entries are hidden. Pass `--full-trace` to see hidden and internal frames.</failure></testcase><testcase classname="test_tls_communication.TestTLSFuzzing" name="test_random_text_passwords" time="1.006"><failure message="hypothesis.errors.FailedHealthCheck: Function-scoped fixture 'tls_server' used by 'test_tls_communication.py::TestTLSFuzzing::test_random_text_passwords'&#10;&#10;Function-scoped fixtures are not reset between examples generated by&#10;`@given(...)`, which is often surprising and can cause subtle test bugs.&#10;&#10;If you were expecting the fixture to run separately for each generated example,&#10;then unfortunately you will need to find a different way to achieve your goal&#10;(e.g. using a similar context manager instead of a fixture).&#10;&#10;If you are confident that your test will work correctly even though the&#10;fixture is not reset between generated examples, you can suppress this health&#10;check to assure Hypothesis that you understand what you are doing.&#10;&#10;See https://hypothesis.readthedocs.io/en/latest/healthchecks.html for more information about this. If you want to disable just this health check, add HealthCheck.function_scoped_fixture to the suppress_health_check settings for this test.">E   hypothesis.errors.FailedHealthCheck: Function-scoped fixture 'tls_server' used by 'test_tls_communication.py::TestTLSFuzzing::test_random_text_passwords'
    
    Function-scoped fixtures are not reset between examples generated by
    `@given(...)`, which is often surprising and can cause subtle test bugs.
    
    If you were expecting the fixture to run separately for each generated example,
    then unfortunately you will need to find a different way to achieve your goal
    (e.g. using a similar context manager instead of a fixture).
    
    If you are confident that your test will work correctly even though the
    fixture is not reset between generated examples, you can suppress this health
    check to assure Hypothesis that you understand what you are doing.
    
    See https://hypothesis.readthedocs.io/en/latest/healthchecks.html for more information about this. If you want to disable just this health check, add HealthCheck.function_scoped_fixture to the suppress_health_check settings for this test.
All traceback entries are hidden. Pass `--full-trace` to see hidden and internal frames.</failure></testcase><testcase classname="test_tls_communication.TestTLSFuzzing" name="test_oversized_password" time="1.017" /><testcase time="1.006" /></testsuite></testsuites>